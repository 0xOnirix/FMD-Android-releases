name: Build and Release FMD Android APK

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Check if new FMD-Android release
      id: check-new-source-release
      run: |
        SOURCE_REPO="fmd-foss%2Ffmd-android"
        TARGET_REPO="${{ github.repository }}"
        SOURCE_TAG=$(curl -s "https://gitlab.com/api/v4/projects/$SOURCE_REPO/repository/tags" | jq -r '.[0].name')
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$TARGET_REPO/releases/latest" | jq -r '.tag_name' 2>/dev/null || echo "")

        if [ "$SOURCE_TAG" == "$LATEST_RELEASE" ]; then
          echo "STOP=true" >> "$GITHUB_ENV"
        else
          echo "TAG=$SOURCE_TAG" >> "$GITHUB_ENV"
        fi

    - name: Download source from GitLab
      id: download-source
      if: ${{ env.STOP != 'true' }}
      run: |
        mkdir source
        curl -L -o source/fmd-android-$TAG.tar.gz \
          "https://gitlab.com/fmd-foss/fmd-android/-/archive/$TAG/fmd-android-$TAG.tar.gz"
        tar -xzf source/fmd-android-$TAG.tar.gz -C source --strip-components=1

    - name: Build APK
      id: build-apk
      if: ${{ env.STOP != 'true' }}
      run: |
        mkdir apk
        cd source
        ./gradlew clean assembleRelease
        mv app/build/outputs/apk/prod/release/*.apk ../apk/fmd-android-${TAG}-unsigned.apk

        echo "UNSIGNED_APK=apk/fmd-android-${TAG}-unsigned.apk" >> "$GITHUB_ENV"
        echo "SIGNED_APK=apk/fmd-android-${TAG}-signed.apk" >> "$GITHUB_ENV"
        echo "ALIGNED_APK=apk/fmd-android-${TAG}-aligned.apk" >> "$GITHUB_ENV"

    - name: Setup zipalign
      id: setup-zipalign
      if: ${{ env.STOP != 'true' }} 
      run: echo "${ANDROID_HOME}/build-tools/36.1.0" >> $GITHUB_PATH

    - name: Zipalign APK
      id: zipalign-apk
      if: ${{ env.STOP != 'true' }}
      run: |
        zipalign -v 4 "$UNSIGNED_APK" "$ALIGNED_APK"

    - name: Decode keystore
      id: decode-keystore
      if: ${{ env.STOP != 'true' }}
      run: |
        echo "${{ secrets.SIGNING_KEYSTORE }}" | base64 -d > keystore.jks

    - name: Sign APK
      id: sign-apk
      if: ${{ env.STOP != 'true' }}
      run: |
        apksigner sign \
            --ks keystore.jks \
            --ks-key-alias '${{ secrets.KEY_ALIAS }}' \
            --ks-pass pass:'${{ secrets.KEYSTORE_PASSWORD }}' \
            --key-pass pass:'${{ secrets.KEY_PASSWORD }}' \
            --out $SIGNED_APK \
            $ALIGNED_APK

    - name: Verify APK signature
      id: verify-signature
      if: ${{ env.STOP != 'true' }}
      run: apksigner verify --verbose "$SIGNED_APK"

    - name: Create GitHub release
      id: create-release
      if: ${{ env.STOP != 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG }}
        name: Release ${{ env.TAG }}
        body: "Automated release from Github"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload signed APK
      id: upload-apk
      if: ${{ env.STOP != 'true' }}
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.SIGNED_APK }}
